/*! @brief WebSocket 是一种基于 TCP 协议的全双工通信协议，在浏览器和服务器之间建立起一个不断开的连接，可以实现实时双向数据传输，并且可以支持任意格式的数据传输。在 fibjs 中，WebSocket 支持模块提供了相应的 API 接口，可以实现 WebSocket 服务器端和客户端的开发

WebSocket 支持模块只是 WebSocket 协议的一个实现，需要在 HTTP 协议之上才能工作。在服务器端，可以通过 upgrade 函数将 HTTP 请求转换为 WebSocket 连接，而在客户端，则需要通过 WebSocket 协议的 URL 来指定需要连接的服务器地址。

启动WebSocket服务器示例：
```JavaScript
var ws = require('ws');
var http = require('http');

var svr = new http.Server(80, {
    '/ws': ws.upgrade(conn => {
        conn.onmessage = e => {
            conn.send('fibjs:' + e.data);
        };
    })
});
svr.start();
```
在客户端中与上述服务器建立连接的示例：
```JavaScript
var ws = require("ws");

var conn = new ws.Socket("ws://127.0.0.1/ws");
// WebSocket 连接成功时触发 onopen 事件
conn.onopen = () => {
    console.log("websocket connected");
    conn.send("hi");
};
// WebSocket 接收到消息时触发 onmessage 事件
conn.onmessage = evt => {
    console.log("websocket receive: " + evt.data);
};
```
 */
interface WebSocket : EventEmitter
{
    /*! @brief WebSocket 构造函数
     @param url 指定连接的服务器
     @param protocol 指定握手协议，缺省为 ""
     @param origin 指定握手时模拟的源，缺省为 ""
    */
    WebSocket(String url, String protocol = "", String origin = "");

    /*! @brief WebSocket 构造函数
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "protocol": "", // 指定握手协议，缺省为空
         "origin": "", // 指定握手时模拟的源，缺省为空
         "perMessageDeflate": false, // 指定是否支持压缩，缺省不支持
         "maxPayload": 67108864, // 指定最大数据包尺寸，缺省为 67108864
         "httpClient": hc, // 自定义 httpClient 对象，缺省使用全局 httpClient
         "headers": // 指定 http(s) 连接时携带的 header，缺省为 {}，
     }
     ```
     @param url 指定连接的服务器
     @param opts 连接选项，缺省是 {}
    */
    WebSocket(String url, Object opts);

    /*! @brief 查询当前对象连接的服务器 */
    readonly String url;

    /*! @brief 查询当前对象连接时的协议 */
    readonly String protocol;

    /*! @brief 查询当前对象连接的源 */
    readonly String origin;

    /*! @brief 查询当前对象的连接状态，参见 ws */
    readonly Integer readyState;

    /*! @brief 关闭当前连接，此操作会向对方发送 CLOSE 数据包，并等待对方响应
     @param code 指定关闭的代码，允许值为 3000-4999 或者 1000，缺省为 1000
     @param reason 指定关闭的原因，缺省为 ""
    */
    close(Integer code = 1000, String reason = "");

    /*! @brief 向对方发送一段文本
     @param data 指定发送的文本
    */
    send(String data);

    /*! @brief 向对方发送一段二进制数据
     @param data 指定发送的二进制数据
    */
    send(Buffer data);

    /*! @brief 查询和绑定连接成功事件，相当于 on("open", func); */
    Function onopen;

    /*! @brief 查询和绑定接受到对方消息的事件，相当于 on("message", func); */
    Function onmessage;

    /*! @brief 查询和绑定连接关闭的事件，相当于 on("close", func); */
    Function onclose;

    /*! @brief 查询和绑定错误发生的事件，相当于 on("error", func); */
    Function onerror;

    /*! @brief 维持 fibjs 进程不退出，在对象绑定期间阻止 fibjs 进程退出
     @return 返回当前对象
    */
    WebSocket ref();

    /*! @brief 允许 fibjs 进程退出，在对象绑定期间允许 fibjs 进程退出
     @return 返回当前对象
    */
    WebSocket unref();
};
